{"version":3,"sources":["components/Button.js","components/Card.js","components/PeopleList.js","components/PlanetList.js","components/VehicleList.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Button","_ref","receive","name","react_default","a","createElement","className","type","value","onClick","Card","props","height","gender","diameter","gravity","model","cost","PeopleList","detail","values","map","i","components_Card","key","PlanetList","VehicleList","cost_in_credits","Scroll","style","overflow","margin","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickPeoples","event","fetch","then","response","json","data","setState","peoples","results","planets","vehicles","onClickPlanets","onClickVehicles","state","console","log","components_Button","components_Scroll","components_PeopleList","components_PlanetList","components_VehicleList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7848c2df.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Button = ({ receive, name }) => {\r\n\treturn (\r\n\t\t<div className=\"dib ma2 pa3\">\r\n\t\t\t<input className='btn btn-warning btn-lg' type='submit' value={name} onClick={receive}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-purple dib br3 pa3 ma2 grow col-3'>\r\n\t\t\t<h3>{props.name}</h3>\r\n\t\t\t<p>{props.height}</p>\r\n\t\t\t<p>{props.gender}</p>\r\n\t\t\t<p>{props.diameter}</p>\r\n\t\t\t<p>{props.gravity}</p>\r\n\t\t\t<p>{props.model}</p>\r\n\t\t\t<p>{props.cost}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;\t","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst PeopleList = ({values}) => {\r\n\tconst detail = values.map((value, i) => {\r\n\t\treturn <Card key={i} \r\n\t\tname={value.name} \r\n\t\theight={'Height : ' + value.height}\r\n\t\tgender={'Gender : ' + value.gender} \r\n\t\t/>\r\n\t\t})\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{detail}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default PeopleList;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst PlanetList = ({values}) => {\r\n\tconst detail = values.map((value, i) => {\r\n\t\treturn <Card key={i} \r\n\t\tname={value.name}\r\n\t\tdiameter={'Diameter : ' + value.diameter} \r\n\t\tgravity={'Gravity : ' + value.gravity}\r\n\t\t/>\r\n\t})\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{detail}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default PlanetList;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst VehicleList = ({values}) => {\r\n\tconst detail = values.map((value, i) => {\r\n\t\treturn <Card key={i} \r\n\t\tname={value.name}\r\n\t\tmodel={'Model : ' + value.model}\r\n\t\tcost={'Cost : ' + value.cost_in_credits} />\r\n\t})\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{detail}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default VehicleList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className='jumbotron bg-light-red' style={{ overflow: 'scroll', height: '435px', margin: 'auto'}}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\nimport Button from '../components/Button';\nimport PeopleList from '../components/PeopleList';\nimport PlanetList from '../components/PlanetList';\nimport VehicleList from '../components/VehicleList';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nclass App extends Component{\n  constructor() {\n    super()\n    this.state = {\n      peoples: [],\n      planets: [],\n      vehicles:[]\n    }\n  }\n\n\n  onClickPeoples = (event) => {\n    fetch('https://swapi.co/api/people')\n    .then(response => response.json())\n    .then(data => this.setState({ peoples: data.results }))\n    .then(this.setState({planets:[], vehicles:[]}))\n  };\n\n  onClickPlanets = (event) => {\n    fetch('https://swapi.co/api/planets')\n    .then(response => response.json())\n    .then(data => this.setState({ planets: data.results }))\n    .then(this.setState({peoples:[], vehicles:[]}))\n  };\n\n  onClickVehicles = (event) => {\n    fetch('https://swapi.co/api/vehicles')\n    .then(response => response.json())\n    .then(data => this.setState({ vehicles: data.results }))\n    .then(this.setState({peoples:[], planets:[]}))\n  };\n\n  render() {\n    console.log(this.state.peoples, \"render\")\n    \n    return(\n      <div className=\"app tc bg-orange\">\n        <h1 className='display-4 red fw8'>Star Wars</h1>\n          <Button receive={this.onClickPeoples} name='Peoples'/>\n          <Button receive={this.onClickPlanets} name='Planets'/>\n          <Button receive={this.onClickVehicles} name='Vehicles'/>\n        <Scroll>\n          <PeopleList values={this.state.peoples} />\n          <PlanetList values={this.state.planets} />\n          <VehicleList values={this.state.vehicles} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}